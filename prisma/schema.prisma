// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./sports-betting.db"
}

model User {
  id            String         @id @default(uuid())
  username      String         @unique
  email         String         @unique
  passwordHash  String
  balance       Float          @default(1000)
  createdAt     DateTime       @default(now())
  bets          Bet[]
  transactions  Transaction[]
  notifications Notification[]

  @@map("users")
}

model Sport {
  id       String  @id @default(uuid())
  name     String  @unique
  icon     String
  isActive Boolean @default(true)
  games    Game[]

  @@map("sports")
}

model Game {
  id            String         @id @default(uuid())
  sportId       String
  sport         Sport          @relation(fields: [sportId], references: [id])
  homeTeam      String
  awayTeam      String
  homeScore     Int            @default(0)
  awayScore     Int            @default(0)
  startTime     DateTime
  status        String         @default("upcoming") // upcoming, live, finished
  isLive        Boolean        @default(false)
  odds          Odds?
  betSelections BetSelection[]

  @@map("games")
}

model Odds {
  id        String   @id @default(uuid())
  gameId    String   @unique
  game      Game     @relation(fields: [gameId], references: [id])
  homeWin   Float
  draw      Float?
  awayWin   Float
  updatedAt DateTime @default(now())

  @@map("odds")
}

model Bet {
  id                String         @id @default(uuid())
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  amount            Float
  potentialWinnings Float
  status            String         @default("pending") // pending, won, lost
  createdAt         DateTime       @default(now())
  selections        BetSelection[]

  @@map("bets")
}

model BetSelection {
  id        String @id @default(uuid())
  betId     String
  bet       Bet    @relation(fields: [betId], references: [id])
  gameId    String
  game      Game   @relation(fields: [gameId], references: [id])
  selection String // home, draw, away
  odds      Float
  status    String @default("pending") // pending, won, lost

  @@map("bet_selections")
}

model Transaction {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  amount      Float
  type        String // deposit, withdrawal, bet, win
  description String
  createdAt   DateTime @default(now())

  @@map("transactions")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  message   String
  type      String // info, success, warning, error
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("notifications")
}
